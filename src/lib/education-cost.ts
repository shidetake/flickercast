import { Child, SpecialExpense } from './types';

/**
 * 教育費の典型的な金額（文部科学省の統計データに基づく）
 * 金額は円単位
 */

// 幼稚園（3-6歳、3年分）
const KINDERGARTEN_COST = {
  public: 220000 * 3, // 公立: 約66万円
  private: 530000 * 3, // 私立: 約159万円
};

// 小学校（6-12歳、6年分）
const ELEMENTARY_COST = {
  public: 320000 * 6, // 公立: 約192万円
  private: 1590000 * 6, // 私立: 約954万円
};

// 中学校（3年分 + 入学金）
const JUNIOR_HIGH_COST = {
  public: {
    tuition: 490000 * 3, // 公立: 約147万円
    entrance: 0, // 公立は入学金なし
  },
  private: {
    tuition: 1410000 * 3, // 私立: 約423万円
    entrance: 260000, // 私立入学金: 約26万円
  },
};

// 高校（3年分 + 入学金）
const HIGH_SCHOOL_COST = {
  public: {
    tuition: 460000 * 3, // 公立: 約138万円
    entrance: 0, // 公立は入学金なし
  },
  private: {
    tuition: 970000 * 3, // 私立: 約291万円
    entrance: 170000, // 私立入学金: 約17万円
  },
};

// 大学（4年分 + 入学金）
const UNIVERSITY_COST = {
  public: {
    tuition: 540000 * 4, // 国立: 約216万円
    entrance: 280000, // 国立入学金: 約28万円
  },
  private: {
    tuition: 930000 * 4, // 私立文系: 約372万円（理系は約124万円だが、平均的な文系で計算）
    entrance: 250000, // 私立入学金: 約25万円
  },
};

// 受験関連費用（塾代・予備校代を含む）
const EXAM_PREP_COST = {
  juniorHigh: 2000000, // 中学受験: 約200万円（3年間の塾代等）
  highSchool: 1000000, // 高校受験: 約100万円（3年間の塾代等）
  university: 1500000, // 大学受験: 約150万円（3年間の塾代等）
};

/**
 * 子供の誕生年から、各教育段階に到達する年齢（ユーザーの年齢）を計算
 */
function calculateEducationMilestones(
  childBirthYear: number,
  userBirthYear: number
): {
  kindergartenAge: number; // 幼稚園入園時のユーザー年齢
  elementaryAge: number; // 小学校入学時のユーザー年齢
  juniorHighAge: number; // 中学校入学時のユーザー年齢
  highSchoolAge: number; // 高校入学時のユーザー年齢
  universityAge: number; // 大学入学時のユーザー年齢
  juniorHighExamAge: number; // 中学受験準備開始時のユーザー年齢
  highSchoolExamAge: number; // 高校受験準備開始時のユーザー年齢
  universityExamAge: number; // 大学受験準備開始時のユーザー年齢
} {
  const ageDifference = childBirthYear - userBirthYear;

  return {
    kindergartenAge: ageDifference + 3, // 子供が3歳のとき
    elementaryAge: ageDifference + 6, // 子供が6歳のとき
    juniorHighAge: ageDifference + 12, // 子供が12歳のとき
    highSchoolAge: ageDifference + 15, // 子供が15歳のとき
    universityAge: ageDifference + 18, // 子供が18歳のとき
    juniorHighExamAge: ageDifference + 9, // 子供が9歳のとき（小4から塾）
    highSchoolExamAge: ageDifference + 12, // 子供が12歳のとき（中1から塾）
    universityExamAge: ageDifference + 15, // 子供が15歳のとき（高1から塾）
  };
}

/**
 * 子供の教育費を自動生成
 * @param child 子供情報
 * @param currentYear 現在の年（例: 2025）
 * @param currentAge ユーザーの現在年齢
 * @returns 生成された特別支出の配列
 */
export function generateEducationExpenses(
  child: Child,
  currentYear: number,
  currentAge: number
): SpecialExpense[] {
  const expenses: SpecialExpense[] = [];

  // ユーザーの誕生年を計算
  const userBirthYear = currentYear - currentAge;

  // 各教育段階に到達するユーザーの年齢を計算
  const milestones = calculateEducationMilestones(child.birthYear, userBirthYear);

  // 幼稚園
  const kindergartenCost = child.kindergartenPrivate
    ? KINDERGARTEN_COST.private
    : KINDERGARTEN_COST.public;

  if (milestones.kindergartenAge >= currentAge) {
    expenses.push({
      id: `${child.id}-kindergarten`,
      name: `幼稚園（3年分）`,
      amount: kindergartenCost,
      targetAge: milestones.kindergartenAge,
      autoGenerated: true,
      childId: child.id,
    });
  }

  // 小学校
  const elementaryCost = child.elementaryPrivate
    ? ELEMENTARY_COST.private
    : ELEMENTARY_COST.public;

  if (milestones.elementaryAge >= currentAge) {
    expenses.push({
      id: `${child.id}-elementary`,
      name: `小学校（6年分）`,
      amount: elementaryCost,
      targetAge: milestones.elementaryAge,
      autoGenerated: true,
      childId: child.id,
    });
  }

  // 中学校
  const juniorHighCost = child.juniorHighPrivate
    ? JUNIOR_HIGH_COST.private.tuition + JUNIOR_HIGH_COST.private.entrance
    : JUNIOR_HIGH_COST.public.tuition;

  if (milestones.juniorHighAge >= currentAge) {
    expenses.push({
      id: `${child.id}-junior-high`,
      name: `中学校（3年分${child.juniorHighPrivate ? '+入学金' : ''}）`,
      amount: juniorHighCost,
      targetAge: milestones.juniorHighAge,
      autoGenerated: true,
      childId: child.id,
    });
  }

  // 中学受験準備費用
  if (child.juniorHighPrivate && milestones.juniorHighExamAge >= currentAge) {
    expenses.push({
      id: `${child.id}-junior-high-exam`,
      name: `中学受験準備（塾代等）`,
      amount: EXAM_PREP_COST.juniorHigh,
      targetAge: milestones.juniorHighExamAge,
      autoGenerated: true,
      childId: child.id,
    });
  }

  // 高校
  const highSchoolCost = child.highSchoolPrivate
    ? HIGH_SCHOOL_COST.private.tuition + HIGH_SCHOOL_COST.private.entrance
    : HIGH_SCHOOL_COST.public.tuition;

  if (milestones.highSchoolAge >= currentAge) {
    expenses.push({
      id: `${child.id}-high-school`,
      name: `高校（3年分${child.highSchoolPrivate ? '+入学金' : ''}）`,
      amount: highSchoolCost,
      targetAge: milestones.highSchoolAge,
      autoGenerated: true,
      childId: child.id,
    });
  }

  // 高校受験準備費用（私立高校の場合）
  if (child.highSchoolPrivate && milestones.highSchoolExamAge >= currentAge) {
    expenses.push({
      id: `${child.id}-high-school-exam`,
      name: `高校受験準備（塾代等）`,
      amount: EXAM_PREP_COST.highSchool,
      targetAge: milestones.highSchoolExamAge,
      autoGenerated: true,
      childId: child.id,
    });
  }

  // 大学
  const universityCost = child.universityPrivate
    ? UNIVERSITY_COST.private.tuition + UNIVERSITY_COST.private.entrance
    : UNIVERSITY_COST.public.tuition + UNIVERSITY_COST.public.entrance;

  if (milestones.universityAge >= currentAge) {
    expenses.push({
      id: `${child.id}-university`,
      name: `大学（4年分+入学金）`,
      amount: universityCost,
      targetAge: milestones.universityAge,
      autoGenerated: true,
      childId: child.id,
    });
  }

  // 大学受験準備費用（全員）
  if (milestones.universityExamAge >= currentAge) {
    expenses.push({
      id: `${child.id}-university-exam`,
      name: `大学受験準備（塾代等）`,
      amount: EXAM_PREP_COST.university,
      targetAge: milestones.universityExamAge,
      autoGenerated: true,
      childId: child.id,
    });
  }

  return expenses;
}

/**
 * 複数の子供の教育費を一括生成
 */
export function generateAllEducationExpenses(
  children: Child[],
  currentYear: number,
  currentAge: number
): SpecialExpense[] {
  return children.flatMap(child =>
    generateEducationExpenses(child, currentYear, currentAge)
  );
}
